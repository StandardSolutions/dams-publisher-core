package ru.standardsolutions.dams.publisher.core.initializer;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã outbox –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PostgreSQL, MySQL, SQL Server, Oracle, H2.
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å–æ–≤.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 */
public class SchemaInitializer {

    private static final String CURRENT_VERSION = "1.0";

    private final String jdbcUrl;
    private final String username;
    private final String password;
    private final String instanceId;
    private final DatabaseType databaseType;
    private final Map<String, String> lockSqlCache = new HashMap<>();

    public SchemaInitializer(String jdbcUrl, String username, String password) {
        this.jdbcUrl = jdbcUrl;
        this.username = username;
        this.password = password;
        this.instanceId = UUID.randomUUID().toString();
        this.databaseType = DatabaseType.ofJdbcUrl(jdbcUrl);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ö–µ–º—ã outbox —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
     */
    public void initializeSchema() throws SQLException, IOException {
        System.out.println("–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ö–µ–º—ã outbox...");
        System.out.println("Instance ID: " + instanceId);
        System.out.println("Database Type: " + databaseType);

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if (isSchemaUpToDate(connection)) {
                System.out.println("‚úÖ –°—Ö–µ–º–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ (–≤–µ—Ä—Å–∏—è " + CURRENT_VERSION + "), –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
                return;
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if (!acquireLock(connection)) {
                System.out.println("‚è≥ –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –æ–∂–∏–¥–∞–µ–º...");
                waitForInitialization(connection);
                return;
            }
            
            try {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                String sqlScript = loadSchemaScript();
                executeSchemaScript(connection, sqlScript);
                System.out.println("‚úÖ –°—Ö–µ–º–∞ outbox —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º " + instanceId);
                
            } finally {
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                releaseLock(connection);
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã outbox: " + e.getMessage());
            throw e;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ª–∏ —Å—Ö–µ–º–∞
     */
    private boolean isSchemaUpToDate(Connection connection) throws SQLException {
        try (PreparedStatement stmt = connection.prepareStatement(
                "SELECT 1 FROM schema_version WHERE version = ?")) {
            stmt.setString(1, CURRENT_VERSION);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next(); // –°—Ö–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞
            }
        } catch (SQLException e) {
            // –¢–∞–±–ª–∏—Ü–∞ schema_version –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            return false;
        }
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    private boolean acquireLock(Connection connection) throws SQLException {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        createLockTableIfNotExists(connection);
        
        String insertSql = getLockSql("insert");
        try (PreparedStatement stmt = connection.prepareStatement(insertSql)) {
            stmt.setString(1, instanceId);
            stmt.executeUpdate();
            System.out.println("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º " + instanceId);
            return true;
        } catch (SQLException e) {
            // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –°–£–ë–î
     */
    private void createLockTableIfNotExists(Connection connection) throws SQLException {
        String createLockTable = loadCreateLockTableScript();
        
        try (Statement stmt = connection.createStatement()) {
            stmt.execute(createLockTable);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     */
    private String loadCreateLockTableScript() {
        try {
            String scriptPath = "/db/scripts/create_lock_table_" + databaseType.name().toLowerCase() + ".sql";
            return loadScript(scriptPath);
        } catch (IOException e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", e);
        }
    }

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
     */
    private void releaseLock(Connection connection) throws SQLException {
        String deleteSql = getLockSql("delete");
        try (PreparedStatement stmt = connection.prepareStatement(deleteSql)) {
            stmt.setString(1, instanceId);
            stmt.executeUpdate();
            System.out.println("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º " + instanceId);
        }
    }

    /**
     * –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º
     */
    private void waitForInitialization(Connection connection) throws SQLException {
        int maxWaitSeconds = 60;
        int waitIntervalMs = 1000;
        
        for (int i = 0; i < maxWaitSeconds; i++) {
            try {
                Thread.sleep(waitIntervalMs);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                if (isSchemaUpToDate(connection)) {
                    System.out.println("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º");
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–∏—Å–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
                if (isLockStale(connection)) {
                    System.out.println("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –æ—á–∏—â–∞–µ–º...");
                    clearStaleLock(connection);
                    return;
                }
                
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new SQLException("–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ", e);
            }
        }
        
        throw new SQLException("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (60 —Å–µ–∫—É–Ω–¥)");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–≤–∏—Å–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
     */
    private boolean isLockStale(Connection connection) throws SQLException {
        String staleCheckSql = getLockSql("check_stale");
        try (PreparedStatement stmt = connection.prepareStatement(staleCheckSql)) {
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –∑–∞–≤–∏—Å—à—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
     */
    private void clearStaleLock(Connection connection) throws SQLException {
        String clearStaleSql = getLockSql("clear_stale");
        try (Statement stmt = connection.createStatement()) {
            stmt.execute(clearStaleSql);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç SQL –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∏–∑ —Ñ–∞–π–ª–∞
     */
    private String getLockSql(String operation) {
        String cacheKey = databaseType.name().toLowerCase() + "_" + operation;
        
        if (!lockSqlCache.containsKey(cacheKey)) {
            try {
                String scriptPath = "/db/scripts/lock_" + databaseType.name().toLowerCase() + ".sql";
                String script = loadScript(scriptPath);
                parseLockScript(script, lockSqlCache);
            } catch (IOException e) {
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", e);
            }
        }
        
        return lockSqlCache.get(cacheKey);
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç SQL —Å–∫—Ä–∏–ø—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
     */
    private void parseLockScript(String script, Map<String, String> cache) {
        String[] lines = script.split("\n");
        String currentOperation = null;
        StringBuilder currentSql = new StringBuilder();
        
        for (String line : lines) {
            line = line.trim();
            
            if (line.startsWith("-- Insert lock")) {
                if (currentOperation != null) {
                    cache.put(databaseType.name().toLowerCase() + "_" + currentOperation, currentSql.toString().trim());
                }
                currentOperation = "insert";
                currentSql = new StringBuilder();
            } else if (line.startsWith("-- Delete lock")) {
                if (currentOperation != null) {
                    cache.put(databaseType.name().toLowerCase() + "_" + currentOperation, currentSql.toString().trim());
                }
                currentOperation = "delete";
                currentSql = new StringBuilder();
            } else if (line.startsWith("-- Check for stale locks")) {
                if (currentOperation != null) {
                    cache.put(databaseType.name().toLowerCase() + "_" + currentOperation, currentSql.toString().trim());
                }
                currentOperation = "check_stale";
                currentSql = new StringBuilder();
            } else if (line.startsWith("-- Clear stale locks")) {
                if (currentOperation != null) {
                    cache.put(databaseType.name().toLowerCase() + "_" + currentOperation, currentSql.toString().trim());
                }
                currentOperation = "clear_stale";
                currentSql = new StringBuilder();
            } else if (!line.startsWith("--") && !line.isEmpty() && currentOperation != null) {
                currentSql.append(line).append(" ");
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if (currentOperation != null) {
            cache.put(databaseType.name().toLowerCase() + "_" + currentOperation, currentSql.toString().trim());
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private String loadSchemaScript() throws IOException {
        String scriptPath = "/db/scripts/outbox_" + databaseType.name().toLowerCase() + "_schema.sql";
        return loadScript(scriptPath);
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    private String loadScript(String scriptPath) throws IOException {
        try (InputStream inputStream = getClass().getResourceAsStream(scriptPath)) {
            if (inputStream == null) {
                throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞: " + scriptPath);
            }
            return new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
     */
    private void executeSchemaScript(Connection connection, String sqlScript) throws SQLException {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç –∫–∞–∫ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try (Statement statement = connection.createStatement()) {
                statement.execute(sqlScript);
                System.out.println("SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            
            // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            connection.commit();
            System.out.println("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ - –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
            
        } catch (SQLException e) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try {
                connection.rollback();
                System.err.println("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: " + e.getMessage());
                System.err.println("üîÑ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–∞—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏");
            } catch (SQLException rollbackEx) {
                System.err.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + rollbackEx.getMessage());
            }
            throw e;
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞
            connection.setAutoCommit(autoCommit);
        }
    }
}